/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  AccessProfile
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';


export const getAdminAccessProfilesListResponseMock = (): AccessProfile[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 128}}), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 512}}), null]), undefined]), flags_CanSeeNsfw: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storageId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), personGroups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personGroupId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), dateRanges: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), fromDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), toDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})), undefined])})))

export const getAdminAccessProfilesGetResponseMock = (overrideResponse: Partial< AccessProfile > = {}): AccessProfile => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 128}}), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 512}}), null]), undefined]), flags_CanSeeNsfw: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storageId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), profile: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 128}}), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 512}}), null]), undefined]), flags_CanSeeNsfw: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storages: faker.helpers.arrayElement([[], undefined]), personGroups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personGroupId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), dateRanges: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), fromDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), toDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})), undefined])}, undefined])})), undefined]), personGroups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personGroupId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), profile: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 128}}), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 512}}), null]), undefined]), flags_CanSeeNsfw: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storageId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), personGroups: faker.helpers.arrayElement([[], undefined]), dateRanges: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), fromDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), toDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})), undefined])}, undefined])})), undefined]), dateRanges: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), fromDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), toDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), profile: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 128}}), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 512}}), null]), undefined]), flags_CanSeeNsfw: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storages: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storageId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), personGroups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({profileId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personGroupId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), dateRanges: faker.helpers.arrayElement([[], undefined])}, undefined])})), undefined]), ...overrideResponse})


export const getAdminAccessProfilesListMockHandler = (overrideResponse?: AccessProfile[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AccessProfile[]> | AccessProfile[])) => {
  return http.get('/api/admin/access-profiles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getAdminAccessProfilesListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAdminAccessProfilesCreateMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('/api/admin/access-profiles', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesGetMockHandler = (overrideResponse?: AccessProfile | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AccessProfile> | AccessProfile)) => {
  return http.get('/api/admin/access-profiles/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getAdminAccessProfilesGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAdminAccessProfilesUpdateMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<null> | null)) => {
  return http.put('/api/admin/access-profiles/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesDeleteMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/admin/access-profiles/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesAssignUserMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('/api/admin/access-profiles/:id/assign-user/:userId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesUnassignUserMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/admin/access-profiles/:id/assign-user/:userId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesAssignRoleMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('/api/admin/access-profiles/:id/assign-role/:roleId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAdminAccessProfilesUnassignRoleMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/admin/access-profiles/:id/assign-role/:roleId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getAdminAccessProfilesMock = () => [
  getAdminAccessProfilesListMockHandler(),
  getAdminAccessProfilesCreateMockHandler(),
  getAdminAccessProfilesGetMockHandler(),
  getAdminAccessProfilesUpdateMockHandler(),
  getAdminAccessProfilesDeleteMockHandler(),
  getAdminAccessProfilesAssignUserMockHandler(),
  getAdminAccessProfilesUnassignUserMockHandler(),
  getAdminAccessProfilesAssignRoleMockHandler(),
  getAdminAccessProfilesUnassignRoleMockHandler()]
