/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import type { PersonDto } from '../photoBankApi.schemas';

import { customFetcher } from '../../../../../shared/src/api/photobank/fetcher';

export type personsGetAllResponse200 = {
  data: PersonDto[];
  status: 200;
};

export type personsGetAllResponseComposite = personsGetAllResponse200;

export type personsGetAllResponse = personsGetAllResponseComposite & {
  headers: Headers;
};

export const getPersonsGetAllUrl = () => {
  return `/persons`;
};

export const personsGetAll = async (
  options?: RequestInit
): Promise<personsGetAllResponse> => {
  return customFetcher<personsGetAllResponse>(getPersonsGetAllUrl(), {
    ...options,
    method: 'GET',
  });
};

export type personsCreateResponse201 = {
  data: PersonDto;
  status: 201;
};

export type personsCreateResponseComposite = personsCreateResponse201;

export type personsCreateResponse = personsCreateResponseComposite & {
  headers: Headers;
};

export const getPersonsCreateUrl = () => {
  return `/persons`;
};

export const personsCreate = async (
  personDto: PersonDto,
  options?: RequestInit
): Promise<personsCreateResponse> => {
  return customFetcher<personsCreateResponse>(getPersonsCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(personDto),
  });
};

export type personsUpdateResponse200 = {
  data: PersonDto;
  status: 200;
};

export type personsUpdateResponseComposite = personsUpdateResponse200;

export type personsUpdateResponse = personsUpdateResponseComposite & {
  headers: Headers;
};

export const getPersonsUpdateUrl = (personId: number) => {
  return `/persons/${personId}`;
};

export const personsUpdate = async (
  personId: number,
  personDto: PersonDto,
  options?: RequestInit
): Promise<personsUpdateResponse> => {
  return customFetcher<personsUpdateResponse>(getPersonsUpdateUrl(personId), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(personDto),
  });
};

export type personsDeleteResponse204 = {
  data: null;
  status: 204;
};

export type personsDeleteResponseComposite = personsDeleteResponse204;

export type personsDeleteResponse = personsDeleteResponseComposite & {
  headers: Headers;
};

export const getPersonsDeleteUrl = (personId: number) => {
  return `/persons/${personId}`;
};

export const personsDelete = async (
  personId: number,
  options?: RequestInit
): Promise<personsDeleteResponse> => {
  return customFetcher<personsDeleteResponse>(getPersonsDeleteUrl(personId), {
    ...options,
    method: 'DELETE',
  });
};
