/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import type {
  LoginRequestDto,
  LoginResponseDto,
  RegisterRequestDto,
  TelegramExchangeRequest,
  TelegramExchangeResponse,
  TelegramSubscriptionDto,
  UpdateUserDto,
  UserDto
} from '../photoBankApi.schemas';

import { photobankAxios } from '../../axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  export const getAuth = () => {
const authLogin = (
    loginRequestDto: LoginRequestDto,
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<LoginResponseDto>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDto
    },
      options);
    }
  const authRegister = (
    registerRequestDto: RegisterRequestDto,
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<null>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequestDto
    },
      options);
    }
  const authGetUser = (
    
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<UserDto>(
      {url: `/auth/user`, method: 'GET'
    },
      options);
    }
  const authUpdateUser = (
    updateUserDto: UpdateUserDto,
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<null>(
      {url: `/auth/user`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserDto
    },
      options);
    }
  const authGetTelegramSubscriptions = (
    
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<TelegramSubscriptionDto[]>(
      {url: `/auth/telegram/subscriptions`, method: 'GET'
    },
      options);
    }
  const authTelegramExchange = (
    telegramExchangeRequest: TelegramExchangeRequest,
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<TelegramExchangeResponse>(
      {url: `/auth/telegram/exchange`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: telegramExchangeRequest
    },
      options);
    }
  const authGetEffective = (
    
 options?: SecondParameter<typeof photobankAxios>,) => {
      return photobankAxios<null>(
      {url: `/auth/debug/effective-access`, method: 'GET'
    },
      options);
    }
  return {authLogin,authRegister,authGetUser,authUpdateUser,authGetTelegramSubscriptions,authTelegramExchange,authGetEffective}};
export type AuthLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authLogin']>>>
export type AuthRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authRegister']>>>
export type AuthGetUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetUser']>>>
export type AuthUpdateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authUpdateUser']>>>
export type AuthGetTelegramSubscriptionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetTelegramSubscriptions']>>>
export type AuthTelegramExchangeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authTelegramExchange']>>>
export type AuthGetEffectiveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetEffective']>>>
