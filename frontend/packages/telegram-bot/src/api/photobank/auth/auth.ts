/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import type {
  ClaimDto,
  LoginRequestDto,
  LoginResponseDto,
  RegisterRequestDto,
  RoleDto,
  UpdateUserDto,
  UserDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { photobankAxios } from '../../axios-instance';



  export const getAuth = () => {
const authLogin = (
    loginRequestDto: LoginRequestDto,
 ) => {
      return photobankAxios<LoginResponseDto>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDto
    },
      );
    }
  const authRegister = (
    registerRequestDto: RegisterRequestDto,
 ) => {
      return photobankAxios<null>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequestDto
    },
      );
    }
  const authGetUser = (
    
 ) => {
      return photobankAxios<UserDto>(
      {url: `/auth/user`, method: 'GET'
    },
      );
    }
  const authUpdateUser = (
    updateUserDto: UpdateUserDto,
 ) => {
      return photobankAxios<null>(
      {url: `/auth/user`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserDto
    },
      );
    }
  const authGetUserClaims = (
    
 ) => {
      return photobankAxios<ClaimDto[]>(
      {url: `/auth/claims`, method: 'GET'
    },
      );
    }
  const authGetUserRoles = (
    
 ) => {
      return photobankAxios<RoleDto[]>(
      {url: `/auth/roles`, method: 'GET'
    },
      );
    }
  return {authLogin,authRegister,authGetUser,authUpdateUser,authGetUserClaims,authGetUserRoles}};

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type AuthLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authLogin']>>>
export type AuthRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authRegister']>>>
export type AuthGetUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetUser']>>>
export type AuthUpdateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authUpdateUser']>>>
export type AuthGetUserClaimsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetUserClaims']>>>
export type AuthGetUserRolesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getAuth>['authGetUserRoles']>>>
