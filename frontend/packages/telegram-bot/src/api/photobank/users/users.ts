/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateUserDto,
  ProblemDetails,
  ResetPasswordDto,
  SetRolesDto,
  UpdateUserDto,
  UserDto,
  UsersGetAllParams,
} from '../photoBankApi.schemas';

import { customFetcher } from '../../../../../shared/src/api/photobank/fetcher';

export type usersGetAllResponse200 = {
  data: UserDto[];
  status: 200;
};

export type usersGetAllResponseComposite = usersGetAllResponse200;

export type usersGetAllResponse = usersGetAllResponseComposite & {
  headers: Headers;
};

export const getUsersGetAllUrl = (params?: UsersGetAllParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/users?${stringifiedParams}`
    : `/admin/users`;
};

export const usersGetAll = async (
  params?: UsersGetAllParams,
  options?: RequestInit
): Promise<usersGetAllResponse> => {
  return customFetcher<usersGetAllResponse>(getUsersGetAllUrl(params), {
    ...options,
    method: 'GET',
  });
};

export type usersCreateResponse201 = {
  data: UserDto;
  status: 201;
};

export type usersCreateResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type usersCreateResponseComposite =
  | usersCreateResponse201
  | usersCreateResponse400;

export type usersCreateResponse = usersCreateResponseComposite & {
  headers: Headers;
};

export const getUsersCreateUrl = () => {
  return `/admin/users`;
};

export const usersCreate = async (
  createUserDto: CreateUserDto,
  options?: RequestInit
): Promise<usersCreateResponse> => {
  return customFetcher<usersCreateResponse>(getUsersCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createUserDto),
  });
};

export type usersUpdateResponse200 = {
  data: null;
  status: 200;
};

export type usersUpdateResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type usersUpdateResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type usersUpdateResponseComposite =
  | usersUpdateResponse200
  | usersUpdateResponse400
  | usersUpdateResponse404;

export type usersUpdateResponse = usersUpdateResponseComposite & {
  headers: Headers;
};

export const getUsersUpdateUrl = (id: string) => {
  return `/admin/users/${id}`;
};

export const usersUpdate = async (
  id: string,
  updateUserDto: UpdateUserDto,
  options?: RequestInit
): Promise<usersUpdateResponse> => {
  return customFetcher<usersUpdateResponse>(getUsersUpdateUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateUserDto),
  });
};

export type usersDeleteResponse204 = {
  data: null;
  status: 204;
};

export type usersDeleteResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type usersDeleteResponseComposite =
  | usersDeleteResponse204
  | usersDeleteResponse404;

export type usersDeleteResponse = usersDeleteResponseComposite & {
  headers: Headers;
};

export const getUsersDeleteUrl = (id: string) => {
  return `/admin/users/${id}`;
};

export const usersDelete = async (
  id: string,
  options?: RequestInit
): Promise<usersDeleteResponse> => {
  return customFetcher<usersDeleteResponse>(getUsersDeleteUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

export type usersResetPasswordResponse204 = {
  data: null;
  status: 204;
};

export type usersResetPasswordResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type usersResetPasswordResponseComposite =
  | usersResetPasswordResponse204
  | usersResetPasswordResponse404;

export type usersResetPasswordResponse = usersResetPasswordResponseComposite & {
  headers: Headers;
};

export const getUsersResetPasswordUrl = (id: string) => {
  return `/admin/users/${id}/reset-password`;
};

export const usersResetPassword = async (
  id: string,
  resetPasswordDto: ResetPasswordDto,
  options?: RequestInit
): Promise<usersResetPasswordResponse> => {
  return customFetcher<usersResetPasswordResponse>(
    getUsersResetPasswordUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(resetPasswordDto),
    }
  );
};

export type usersSetRolesResponse204 = {
  data: null;
  status: 204;
};

export type usersSetRolesResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type usersSetRolesResponseComposite =
  | usersSetRolesResponse204
  | usersSetRolesResponse404;

export type usersSetRolesResponse = usersSetRolesResponseComposite & {
  headers: Headers;
};

export const getUsersSetRolesUrl = (id: string) => {
  return `/admin/users/${id}/roles`;
};

export const usersSetRoles = async (
  id: string,
  setRolesDto: SetRolesDto,
  options?: RequestInit
): Promise<usersSetRolesResponse> => {
  return customFetcher<usersSetRolesResponse>(getUsersSetRolesUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(setRolesDto),
  });
};
