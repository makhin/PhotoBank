/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import type {
  FaceDto,
  FaceDtoPageResponse,
  FacesGetFacesPageParams,
} from '../photoBankApi.schemas';

import { customFetcher } from '../../../../../shared/src/api/photobank/fetcher';

export type facesGetFacesPageResponse200 = {
  data: FaceDtoPageResponse;
  status: 200;
};

export type facesGetFacesPageResponseComposite = facesGetFacesPageResponse200;

export type facesGetFacesPageResponse = facesGetFacesPageResponseComposite & {
  headers: Headers;
};

export const getFacesGetFacesPageUrl = (params?: FacesGetFacesPageParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/faces?${stringifiedParams}`
    : `/faces`;
};

export const facesGetFacesPage = async (
  params?: FacesGetFacesPageParams,
  options?: RequestInit
): Promise<facesGetFacesPageResponse> => {
  return customFetcher<facesGetFacesPageResponse>(
    getFacesGetFacesPageUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

export type facesUpdateResponse200 = {
  data: null;
  status: 200;
};

export type facesUpdateResponseComposite = facesUpdateResponse200;

export type facesUpdateResponse = facesUpdateResponseComposite & {
  headers: Headers;
};

export const getFacesUpdateUrl = () => {
  return `/faces`;
};

export const facesUpdate = async (
  faceDto: FaceDto,
  options?: RequestInit
): Promise<facesUpdateResponse> => {
  return customFetcher<facesUpdateResponse>(getFacesUpdateUrl(), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(faceDto),
  });
};
