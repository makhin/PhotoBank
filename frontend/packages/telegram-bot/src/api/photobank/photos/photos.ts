/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import type {
  FilterDto,
  PhotoDto,
  PhotoItemDto,
  PhotoItemDtoPageResponse,
  PhotosGetDuplicatesParams,
  PhotosUploadBody,
} from '../photoBankApi.schemas';

import { photobankAxios } from '../../axios-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getPhotos = () => {
  const photosSearchPhotos = (
    filterDto: FilterDto,
    options?: SecondParameter<typeof photobankAxios>
  ) => {
    return photobankAxios<PhotoItemDtoPageResponse>(
      {
        url: `/photos/search`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: filterDto,
      },
      options
    );
  };
  const photosGetPhoto = (
    id: number,
    options?: SecondParameter<typeof photobankAxios>
  ) => {
    return photobankAxios<PhotoDto>(
      { url: `/photos/${id}`, method: 'GET' },
      options
    );
  };
  const photosUpload = (
    photosUploadBody: PhotosUploadBody,
    options?: SecondParameter<typeof photobankAxios>
  ) => {
    const formData = new FormData();
    if (photosUploadBody.files !== undefined) {
      photosUploadBody.files.forEach((value) =>
        formData.append(`files`, value)
      );
    }
    if (photosUploadBody.storageId !== undefined) {
      formData.append(`storageId`, photosUploadBody.storageId.toString());
    }
    if (photosUploadBody.path !== undefined) {
      formData.append(`path`, photosUploadBody.path);
    }

    return photobankAxios<null>(
      {
        url: `/photos/upload`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
      },
      options
    );
  };
  const photosGetDuplicates = (
    params?: PhotosGetDuplicatesParams,
    options?: SecondParameter<typeof photobankAxios>
  ) => {
    return photobankAxios<PhotoItemDto[]>(
      { url: `/photos/duplicates`, method: 'GET', params },
      options
    );
  };
  return {
    photosSearchPhotos,
    photosGetPhoto,
    photosUpload,
    photosGetDuplicates,
  };
};
export type PhotosSearchPhotosResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPhotos>['photosSearchPhotos']>>
>;
export type PhotosGetPhotoResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPhotos>['photosGetPhoto']>>
>;
export type PhotosUploadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPhotos>['photosUpload']>>
>;
export type PhotosGetDuplicatesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getPhotos>['photosGetDuplicates']>>
>;
