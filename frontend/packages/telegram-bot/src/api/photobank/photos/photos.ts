/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import type {
  FilterDto,
  PhotoDto,
  PhotoItemDto,
  PhotoItemDtoPageResponse,
  PhotosGetDuplicatesParams,
  PhotosUploadBody
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { photobankAxios } from '../../axios-instance';



  export const getPhotos = () => {
const photosSearchPhotos = (
    filterDto: FilterDto,
 ) => {
      return photobankAxios<PhotoItemDtoPageResponse>(
      {url: `/photos/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterDto
    },
      );
    }
  const photosGetPhoto = (
    id: number,
 ) => {
      return photobankAxios<PhotoDto>(
      {url: `/photos/${id}`, method: 'GET'
    },
      );
    }
  const photosUpload = (
    photosUploadBody: PhotosUploadBody,
 ) => {const formData = new FormData();
if(photosUploadBody.files !== undefined) {
 photosUploadBody.files.forEach(value => formData.append(`files`, value));
 }
if(photosUploadBody.storageId !== undefined) {
 formData.append(`storageId`, photosUploadBody.storageId.toString())
 }
if(photosUploadBody.path !== undefined) {
 formData.append(`path`, photosUploadBody.path)
 }

      return photobankAxios<null>(
      {url: `/photos/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  const photosGetDuplicates = (
    params?: PhotosGetDuplicatesParams,
 ) => {
      return photobankAxios<PhotoItemDto[]>(
      {url: `/photos/duplicates`, method: 'GET',
        params
    },
      );
    }
  return {photosSearchPhotos,photosGetPhoto,photosUpload,photosGetDuplicates}};

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type PhotosSearchPhotosResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getPhotos>['photosSearchPhotos']>>>
export type PhotosGetPhotoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getPhotos>['photosGetPhoto']>>>
export type PhotosUploadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getPhotos>['photosUpload']>>>
export type PhotosGetDuplicatesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getPhotos>['photosGetDuplicates']>>>
