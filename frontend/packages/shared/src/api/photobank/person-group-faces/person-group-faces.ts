/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  PersonGroupFaceDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { customFetcher } from '.././fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export type personGroupFacesGetAllResponse200 = {
  data: PersonGroupFaceDto[]
  status: 200
}
    
export type personGroupFacesGetAllResponseComposite = personGroupFacesGetAllResponse200;
    
export type personGroupFacesGetAllResponse = personGroupFacesGetAllResponseComposite & {
  headers: Headers;
}

export const getPersonGroupFacesGetAllUrl = () => {


  

  return `/persongroupfaces`
}

export const personGroupFacesGetAll = async ( options?: RequestInit): Promise<personGroupFacesGetAllResponse> => {
  
  return customFetcher<personGroupFacesGetAllResponse>(getPersonGroupFacesGetAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPersonGroupFacesGetAllQueryKey = () => {
    return [`/persongroupfaces`] as const;
    }

    
export const getPersonGroupFacesGetAllQueryOptions = <TData = Awaited<ReturnType<typeof personGroupFacesGetAll>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof personGroupFacesGetAll>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPersonGroupFacesGetAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof personGroupFacesGetAll>>> = ({ signal }) => personGroupFacesGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof personGroupFacesGetAll>>, TError, TData> & { queryKey: QueryKey }
}

export type PersonGroupFacesGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof personGroupFacesGetAll>>>
export type PersonGroupFacesGetAllQueryError = unknown



export function usePersonGroupFacesGetAll<TData = Awaited<ReturnType<typeof personGroupFacesGetAll>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof personGroupFacesGetAll>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPersonGroupFacesGetAllQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type personGroupFacesCreateResponse201 = {
  data: PersonGroupFaceDto
  status: 201
}
    
export type personGroupFacesCreateResponseComposite = personGroupFacesCreateResponse201;
    
export type personGroupFacesCreateResponse = personGroupFacesCreateResponseComposite & {
  headers: Headers;
}

export const getPersonGroupFacesCreateUrl = () => {


  

  return `/persongroupfaces`
}

export const personGroupFacesCreate = async (personGroupFaceDto: PersonGroupFaceDto, options?: RequestInit): Promise<personGroupFacesCreateResponse> => {
  
  return customFetcher<personGroupFacesCreateResponse>(getPersonGroupFacesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      personGroupFaceDto,)
  }
);}




export const getPersonGroupFacesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesCreate>>, TError,{data: PersonGroupFaceDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesCreate>>, TError,{data: PersonGroupFaceDto}, TContext> => {

const mutationKey = ['personGroupFacesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof personGroupFacesCreate>>, {data: PersonGroupFaceDto}> = (props) => {
          const {data} = props ?? {};

          return  personGroupFacesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PersonGroupFacesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof personGroupFacesCreate>>>
    export type PersonGroupFacesCreateMutationBody = PersonGroupFaceDto
    export type PersonGroupFacesCreateMutationError = unknown

    export const usePersonGroupFacesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesCreate>>, TError,{data: PersonGroupFaceDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof personGroupFacesCreate>>,
        TError,
        {data: PersonGroupFaceDto},
        TContext
      > => {

      const mutationOptions = getPersonGroupFacesCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export type personGroupFacesUpdateResponse200 = {
  data: PersonGroupFaceDto
  status: 200
}
    
export type personGroupFacesUpdateResponseComposite = personGroupFacesUpdateResponse200;
    
export type personGroupFacesUpdateResponse = personGroupFacesUpdateResponseComposite & {
  headers: Headers;
}

export const getPersonGroupFacesUpdateUrl = (id: number,) => {


  

  return `/persongroupfaces/${id}`
}

export const personGroupFacesUpdate = async (id: number,
    personGroupFaceDto: PersonGroupFaceDto, options?: RequestInit): Promise<personGroupFacesUpdateResponse> => {
  
  return customFetcher<personGroupFacesUpdateResponse>(getPersonGroupFacesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      personGroupFaceDto,)
  }
);}




export const getPersonGroupFacesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesUpdate>>, TError,{id: number;data: PersonGroupFaceDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesUpdate>>, TError,{id: number;data: PersonGroupFaceDto}, TContext> => {

const mutationKey = ['personGroupFacesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof personGroupFacesUpdate>>, {id: number;data: PersonGroupFaceDto}> = (props) => {
          const {id,data} = props ?? {};

          return  personGroupFacesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PersonGroupFacesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof personGroupFacesUpdate>>>
    export type PersonGroupFacesUpdateMutationBody = PersonGroupFaceDto
    export type PersonGroupFacesUpdateMutationError = unknown

    export const usePersonGroupFacesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesUpdate>>, TError,{id: number;data: PersonGroupFaceDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof personGroupFacesUpdate>>,
        TError,
        {id: number;data: PersonGroupFaceDto},
        TContext
      > => {

      const mutationOptions = getPersonGroupFacesUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export type personGroupFacesDeleteResponse204 = {
  data: null
  status: 204
}
    
export type personGroupFacesDeleteResponseComposite = personGroupFacesDeleteResponse204;
    
export type personGroupFacesDeleteResponse = personGroupFacesDeleteResponseComposite & {
  headers: Headers;
}

export const getPersonGroupFacesDeleteUrl = (id: number,) => {


  

  return `/persongroupfaces/${id}`
}

export const personGroupFacesDelete = async (id: number, options?: RequestInit): Promise<personGroupFacesDeleteResponse> => {
  
  return customFetcher<personGroupFacesDeleteResponse>(getPersonGroupFacesDeleteUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getPersonGroupFacesDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesDelete>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['personGroupFacesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof personGroupFacesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  personGroupFacesDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PersonGroupFacesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof personGroupFacesDelete>>>
    
    export type PersonGroupFacesDeleteMutationError = unknown

    export const usePersonGroupFacesDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personGroupFacesDelete>>, TError,{id: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof personGroupFacesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPersonGroupFacesDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    