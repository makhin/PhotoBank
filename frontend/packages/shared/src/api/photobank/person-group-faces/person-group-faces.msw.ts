/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';


export const getPersonGroupFacesGetAllResponseMock = (): PersonGroupFaceDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined}), faceId: faker.number.int({min: undefined, max: undefined}), faceImage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined])})))

export const getPersonGroupFacesCreateResponseMock = (overrideResponse: Partial< PersonGroupFaceDto > = {}): PersonGroupFaceDto => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined}), faceId: faker.number.int({min: undefined, max: undefined}), faceImage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ...overrideResponse})

export const getPersonGroupFacesUpdateResponseMock = (overrideResponse: Partial< PersonGroupFaceDto > = {}): PersonGroupFaceDto => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined}), faceId: faker.number.int({min: undefined, max: undefined}), faceImage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ...overrideResponse})


export const getPersonGroupFacesGetAllMockHandler = (overrideResponse?: PersonGroupFaceDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PersonGroupFaceDto[]> | PersonGroupFaceDto[])) => {
  return http.get('/api/persongroupfaces', async (info) => {await delay(1000);
  
    return new HttpResponse(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupFacesGetAllResponseMock(),
      { status: 200,
        headers: { 'Content-Type': 'text/plain' }
      })
  })
}

export const getPersonGroupFacesCreateMockHandler = (overrideResponse?: PersonGroupFaceDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PersonGroupFaceDto> | PersonGroupFaceDto)) => {
  return http.post('/api/persongroupfaces', async (info) => {await delay(1000);
  
    return new HttpResponse(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupFacesCreateResponseMock(),
      { status: 201,
        headers: { 'Content-Type': 'text/plain' }
      })
  })
}

export const getPersonGroupFacesUpdateMockHandler = (overrideResponse?: PersonGroupFaceDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PersonGroupFaceDto> | PersonGroupFaceDto)) => {
  return http.put('/api/persongroupfaces/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupFacesUpdateResponseMock(),
      { status: 200,
        headers: { 'Content-Type': 'text/plain' }
      })
  })
}

export const getPersonGroupFacesDeleteMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/persongroupfaces/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getPersonGroupFacesMock = () => [
  getPersonGroupFacesGetAllMockHandler(),
  getPersonGroupFacesCreateMockHandler(),
  getPersonGroupFacesUpdateMockHandler(),
  getPersonGroupFacesDeleteMockHandler()
]
