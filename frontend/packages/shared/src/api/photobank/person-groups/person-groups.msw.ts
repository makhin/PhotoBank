/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  PersonGroupDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';


export const getPersonGroupsGetAllResponseMock = (): PersonGroupDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha({length: {min: 1, max: 20}})})))

export const getPersonGroupsCreateResponseMock = (overrideResponse: Partial< PersonGroupDto > = {}): PersonGroupDto => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha({length: {min: 1, max: 20}}), ...overrideResponse})

export const getPersonGroupsUpdateResponseMock = (overrideResponse: Partial< PersonGroupDto > = {}): PersonGroupDto => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha({length: {min: 1, max: 20}}), ...overrideResponse})


export const getPersonGroupsGetAllMockHandler = (overrideResponse?: PersonGroupDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PersonGroupDto[]> | PersonGroupDto[])) => {
  return http.get('/api/persongroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupsGetAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonGroupsCreateMockHandler = (overrideResponse?: PersonGroupDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PersonGroupDto> | PersonGroupDto)) => {
  return http.post('/api/persongroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupsCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonGroupsUpdateMockHandler = (overrideResponse?: PersonGroupDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PersonGroupDto> | PersonGroupDto)) => {
  return http.put('/api/persongroups/:groupId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonGroupsUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonGroupsDeleteMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/persongroups/:groupId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPersonGroupsAddPersonMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('/api/persongroups/:groupId/persons/:personId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPersonGroupsRemovePersonMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/persongroups/:groupId/persons/:personId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getPersonGroupsMock = () => [
  getPersonGroupsGetAllMockHandler(),
  getPersonGroupsCreateMockHandler(),
  getPersonGroupsUpdateMockHandler(),
  getPersonGroupsDeleteMockHandler(),
  getPersonGroupsAddPersonMockHandler(),
  getPersonGroupsRemovePersonMockHandler()
]
