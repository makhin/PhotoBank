/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { FaceDto } from '../photoBankApi.schemas';

import { customFetcher } from '../fetcher';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type facesGetAllResponse200 = {
  data: FaceDto[];
  status: 200;
};

export type facesGetAllResponseComposite = facesGetAllResponse200;

export type facesGetAllResponse = facesGetAllResponseComposite & {
  headers: Headers;
};

export const getFacesGetAllUrl = () => {
  return `/faces`;
};

export const facesGetAll = async (
  options?: RequestInit
): Promise<facesGetAllResponse> => {
  return customFetcher<facesGetAllResponse>(getFacesGetAllUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getFacesGetAllQueryKey = () => {
  return [`/faces`] as const;
};

export const getFacesGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof facesGetAll>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof facesGetAll>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFacesGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof facesGetAll>>> = () =>
    facesGetAll(requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof facesGetAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FacesGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof facesGetAll>>
>;
export type FacesGetAllQueryError = unknown;

export function useFacesGetAll<
  TData = Awaited<ReturnType<typeof facesGetAll>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof facesGetAll>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFacesGetAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type facesUpdateResponse200 = {
  data: null;
  status: 200;
};

export type facesUpdateResponseComposite = facesUpdateResponse200;

export type facesUpdateResponse = facesUpdateResponseComposite & {
  headers: Headers;
};

export const getFacesUpdateUrl = () => {
  return `/faces`;
};

export const facesUpdate = async (
  faceDto: FaceDto,
  options?: RequestInit
): Promise<facesUpdateResponse> => {
  return customFetcher<facesUpdateResponse>(getFacesUpdateUrl(), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(faceDto),
  });
};

export const getFacesUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdate>>,
    TError,
    { data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationKey = ['facesUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof facesUpdate>>,
    { data: FaceDto }
  > = (props) => {
    const { data } = props ?? {};

    return facesUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof facesUpdate>>
>;
export type FacesUpdateMutationBody = FaceDto;
export type FacesUpdateMutationError = unknown;

export const useFacesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdate>>,
    TError,
    { data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationOptions = getFacesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
