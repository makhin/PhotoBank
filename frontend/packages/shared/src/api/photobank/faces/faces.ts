/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  FaceIdentityDto,
  FacesGetParams,
  UpdateFaceIdentityDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { customFetcher } from '.././fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export type facesGetResponse200 = {
  data: FaceIdentityDto[]
  status: 200
}
    
export type facesGetResponseComposite = facesGetResponse200;
    
export type facesGetResponse = facesGetResponseComposite & {
  headers: Headers;
}

export const getFacesGetUrl = (params?: FacesGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/faces?${stringifiedParams}` : `/faces`
}

export const facesGet = async (params?: FacesGetParams, options?: RequestInit): Promise<facesGetResponse> => {
  
  return customFetcher<facesGetResponse>(getFacesGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getFacesGetQueryKey = (params?: FacesGetParams,) => {
    return [`/faces`, ...(params ? [params]: [])] as const;
    }

    
export const getFacesGetQueryOptions = <TData = Awaited<ReturnType<typeof facesGet>>, TError = unknown>(params?: FacesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof facesGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFacesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof facesGet>>> = ({ signal }) => facesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof facesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type FacesGetQueryResult = NonNullable<Awaited<ReturnType<typeof facesGet>>>
export type FacesGetQueryError = unknown



export function useFacesGet<TData = Awaited<ReturnType<typeof facesGet>>, TError = unknown>(
 params?: FacesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof facesGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFacesGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type facesUpdateResponse200 = {
  data: null
  status: 200
}
    
export type facesUpdateResponseComposite = facesUpdateResponse200;
    
export type facesUpdateResponse = facesUpdateResponseComposite & {
  headers: Headers;
}

export const getFacesUpdateUrl = () => {


  

  return `/faces`
}

export const facesUpdate = async (updateFaceIdentityDto: UpdateFaceIdentityDto, options?: RequestInit): Promise<facesUpdateResponse> => {
  
  return customFetcher<facesUpdateResponse>(getFacesUpdateUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateFaceIdentityDto,)
  }
);}




export const getFacesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof facesUpdate>>, TError,{data: UpdateFaceIdentityDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof facesUpdate>>, TError,{data: UpdateFaceIdentityDto}, TContext> => {

const mutationKey = ['facesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof facesUpdate>>, {data: UpdateFaceIdentityDto}> = (props) => {
          const {data} = props ?? {};

          return  facesUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FacesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof facesUpdate>>>
    export type FacesUpdateMutationBody = UpdateFaceIdentityDto
    export type FacesUpdateMutationError = unknown

    export const useFacesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof facesUpdate>>, TError,{data: UpdateFaceIdentityDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof facesUpdate>>,
        TError,
        {data: UpdateFaceIdentityDto},
        TContext
      > => {

      const mutationOptions = getFacesUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    