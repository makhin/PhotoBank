/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  FaceDto,
  FaceIdentityDto,
  FacesGetParams,
  ProblemDetails,
  UpdateFaceIdentityDto,
} from '../photoBankApi.schemas';

import { customFetcher } from '.././fetcher';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type facesGetResponse200 = {
  data: FaceIdentityDto[];
  status: 200;
};

export type facesGetResponseComposite = facesGetResponse200;

export type facesGetResponse = facesGetResponseComposite & {
  headers: Headers;
};

export const getFacesGetUrl = (params?: FacesGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/faces?${stringifiedParams}`
    : `/faces`;
};

export const facesGet = async (
  params?: FacesGetParams,
  options?: RequestInit
): Promise<facesGetResponse> => {
  return customFetcher<facesGetResponse>(getFacesGetUrl(params), {
    ...options,
    method: 'GET',
  });
};

export const getFacesGetQueryKey = (params?: FacesGetParams) => {
  return [`/faces`, ...(params ? [params] : [])] as const;
};

export const getFacesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof facesGet>>,
  TError = unknown,
>(
  params?: FacesGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof facesGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetcher>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFacesGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof facesGet>>> = () =>
    facesGet(params, requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof facesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FacesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof facesGet>>
>;
export type FacesGetQueryError = unknown;

export function useFacesGet<
  TData = Awaited<ReturnType<typeof facesGet>>,
  TError = unknown,
>(
  params?: FacesGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof facesGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetcher>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFacesGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type facesUpdateResponse200 = {
  data: null;
  status: 200;
};

export type facesUpdateResponseComposite = facesUpdateResponse200;

export type facesUpdateResponse = facesUpdateResponseComposite & {
  headers: Headers;
};

export const getFacesUpdateUrl = () => {
  return `/faces`;
};

export const facesUpdate = async (
  updateFaceIdentityDto: UpdateFaceIdentityDto,
  options?: RequestInit
): Promise<facesUpdateResponse> => {
  return customFetcher<facesUpdateResponse>(getFacesUpdateUrl(), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateFaceIdentityDto),
  });
};

export const getFacesUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdate>>,
    TError,
    { data: UpdateFaceIdentityDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: UpdateFaceIdentityDto },
  TContext
> => {
  const mutationKey = ['facesUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof facesUpdate>>,
    { data: UpdateFaceIdentityDto }
  > = (props) => {
    const { data } = props ?? {};

    return facesUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof facesUpdate>>
>;
export type FacesUpdateMutationBody = UpdateFaceIdentityDto;
export type FacesUpdateMutationError = unknown;

export const useFacesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdate>>,
    TError,
    { data: UpdateFaceIdentityDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: UpdateFaceIdentityDto },
  TContext
> => {
  const mutationOptions = getFacesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export type facesGetImageResponse200 = {
  data: null;
  status: 200;
};

export type facesGetImageResponse301 = {
  data: null;
  status: 301;
};

export type facesGetImageResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type facesGetImageResponseComposite =
  | facesGetImageResponse200
  | facesGetImageResponse301
  | facesGetImageResponse404;

export type facesGetImageResponse = facesGetImageResponseComposite & {
  headers: Headers;
};

export const getFacesGetImageUrl = (id: number) => {
  return `/faces/${id}/image`;
};

export const facesGetImage = async (
  id: number,
  options?: RequestInit
): Promise<facesGetImageResponse> => {
  return customFetcher<facesGetImageResponse>(getFacesGetImageUrl(id), {
    ...options,
    method: 'GET',
  });
};

export const getFacesGetImageQueryKey = (id?: number) => {
  return [`/faces/${id}/image`] as const;
};

export const getFacesGetImageQueryOptions = <
  TData = Awaited<ReturnType<typeof facesGetImage>>,
  TError = null | ProblemDetails,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof facesGetImage>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetcher>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFacesGetImageQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof facesGetImage>>
  > = () => facesGetImage(id, requestOptions);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof facesGetImage>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FacesGetImageQueryResult = NonNullable<
  Awaited<ReturnType<typeof facesGetImage>>
>;
export type FacesGetImageQueryError = null | ProblemDetails;

export function useFacesGetImage<
  TData = Awaited<ReturnType<typeof facesGetImage>>,
  TError = null | ProblemDetails,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof facesGetImage>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetcher>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFacesGetImageQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type facesGetMetadataResponse200 = {
  data: FaceDto[];
  status: 200;
};

export type facesGetMetadataResponseComposite = facesGetMetadataResponse200;

export type facesGetMetadataResponse = facesGetMetadataResponseComposite & {
  headers: Headers;
};

export const getFacesGetMetadataUrl = () => {
  return `/personfaces`;
};

export const facesGetMetadata = async (
  options?: RequestInit
): Promise<facesGetMetadataResponse> => {
  return customFetcher<facesGetMetadataResponse>(getFacesGetMetadataUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getFacesGetMetadataQueryKey = () => {
  return [`/personfaces`] as const;
};

export const getFacesGetMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof facesGetMetadata>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof facesGetMetadata>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFacesGetMetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof facesGetMetadata>>
  > = () => facesGetMetadata(requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof facesGetMetadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FacesGetMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof facesGetMetadata>>
>;
export type FacesGetMetadataQueryError = unknown;

export function useFacesGetMetadata<
  TData = Awaited<ReturnType<typeof facesGetMetadata>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof facesGetMetadata>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFacesGetMetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type facesCreateMetadataResponse201 = {
  data: FaceDto;
  status: 201;
};

export type facesCreateMetadataResponseComposite =
  facesCreateMetadataResponse201;

export type facesCreateMetadataResponse =
  facesCreateMetadataResponseComposite & {
    headers: Headers;
  };

export const getFacesCreateMetadataUrl = () => {
  return `/personfaces`;
};

export const facesCreateMetadata = async (
  faceDto: FaceDto,
  options?: RequestInit
): Promise<facesCreateMetadataResponse> => {
  return customFetcher<facesCreateMetadataResponse>(
    getFacesCreateMetadataUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(faceDto),
    }
  );
};

export const getFacesCreateMetadataMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesCreateMetadata>>,
    TError,
    { data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesCreateMetadata>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationKey = ['facesCreateMetadata'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof facesCreateMetadata>>,
    { data: FaceDto }
  > = (props) => {
    const { data } = props ?? {};

    return facesCreateMetadata(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesCreateMetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof facesCreateMetadata>>
>;
export type FacesCreateMetadataMutationBody = FaceDto;
export type FacesCreateMetadataMutationError = unknown;

export const useFacesCreateMetadata = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesCreateMetadata>>,
    TError,
    { data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof facesCreateMetadata>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationOptions = getFacesCreateMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
export type facesUpdateMetadataResponse200 = {
  data: FaceDto;
  status: 200;
};

export type facesUpdateMetadataResponseComposite =
  facesUpdateMetadataResponse200;

export type facesUpdateMetadataResponse =
  facesUpdateMetadataResponseComposite & {
    headers: Headers;
  };

export const getFacesUpdateMetadataUrl = (id: number) => {
  return `/personfaces/${id}`;
};

export const facesUpdateMetadata = async (
  id: number,
  faceDto: FaceDto,
  options?: RequestInit
): Promise<facesUpdateMetadataResponse> => {
  return customFetcher<facesUpdateMetadataResponse>(
    getFacesUpdateMetadataUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(faceDto),
    }
  );
};

export const getFacesUpdateMetadataMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdateMetadata>>,
    TError,
    { id: number; data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesUpdateMetadata>>,
  TError,
  { id: number; data: FaceDto },
  TContext
> => {
  const mutationKey = ['facesUpdateMetadata'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof facesUpdateMetadata>>,
    { id: number; data: FaceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return facesUpdateMetadata(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesUpdateMetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof facesUpdateMetadata>>
>;
export type FacesUpdateMetadataMutationBody = FaceDto;
export type FacesUpdateMetadataMutationError = unknown;

export const useFacesUpdateMetadata = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdateMetadata>>,
    TError,
    { id: number; data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof facesUpdateMetadata>>,
  TError,
  { id: number; data: FaceDto },
  TContext
> => {
  const mutationOptions = getFacesUpdateMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
export type facesDeleteMetadataResponse204 = {
  data: null;
  status: 204;
};

export type facesDeleteMetadataResponseComposite =
  facesDeleteMetadataResponse204;

export type facesDeleteMetadataResponse =
  facesDeleteMetadataResponseComposite & {
    headers: Headers;
  };

export const getFacesDeleteMetadataUrl = (id: number) => {
  return `/personfaces/${id}`;
};

export const facesDeleteMetadata = async (
  id: number,
  options?: RequestInit
): Promise<facesDeleteMetadataResponse> => {
  return customFetcher<facesDeleteMetadataResponse>(
    getFacesDeleteMetadataUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  );
};

export const getFacesDeleteMetadataMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesDeleteMetadata>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesDeleteMetadata>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['facesDeleteMetadata'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof facesDeleteMetadata>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return facesDeleteMetadata(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesDeleteMetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof facesDeleteMetadata>>
>;

export type FacesDeleteMetadataMutationError = unknown;

export const useFacesDeleteMetadata = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesDeleteMetadata>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof facesDeleteMetadata>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getFacesDeleteMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
