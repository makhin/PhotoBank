/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  PersonFaceDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';


export const getPersonFacesGetAllResponseMock = (): PersonFaceDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), faceId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined])})))

export const getPersonFacesCreateResponseMock = (overrideResponse: Partial< PersonFaceDto > = {}): PersonFaceDto => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), faceId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ...overrideResponse})

export const getPersonFacesUpdateResponseMock = (overrideResponse: Partial< PersonFaceDto > = {}): PersonFaceDto => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), personId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), faceId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), provider: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), externalGuid: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ...overrideResponse})


export const getPersonFacesGetAllMockHandler = (overrideResponse?: PersonFaceDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PersonFaceDto[]> | PersonFaceDto[])) => {
  return http.get('/api/personfaces', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonFacesGetAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonFacesCreateMockHandler = (overrideResponse?: PersonFaceDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PersonFaceDto> | PersonFaceDto)) => {
  return http.post('/api/personfaces', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonFacesCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonFacesUpdateMockHandler = (overrideResponse?: PersonFaceDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PersonFaceDto> | PersonFaceDto)) => {
  return http.put('/api/personfaces/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPersonFacesUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPersonFacesDeleteMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('/api/personfaces/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getPersonFacesMock = () => [
  getPersonFacesGetAllMockHandler(),
  getPersonFacesCreateMockHandler(),
  getPersonFacesUpdateMockHandler(),
  getPersonFacesDeleteMockHandler()
]
