/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import type {
  ClaimDto,
  ProblemDetails,
  UpdateUserDto,
  UserWithClaimsDto
} from '.././model';

import { customFetcher } from '.././fetcher';

export type usersGetAllResponse200 = {
  data: UserWithClaimsDto[]
  status: 200
}
    
export type usersGetAllResponseComposite = usersGetAllResponse200;
    
export type usersGetAllResponse = usersGetAllResponseComposite & {
  headers: Headers;
}

export const getUsersGetAllUrl = () => {


  

  return `/api/admin/users`
}

export const usersGetAll = async ( options?: RequestInit): Promise<usersGetAllResponse> => {
  
  return customFetcher<usersGetAllResponse>(getUsersGetAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type usersUpdateResponse200 = {
  data: null
  status: 200
}

export type usersUpdateResponse400 = {
  data: ProblemDetails
  status: 400
}

export type usersUpdateResponse404 = {
  data: ProblemDetails
  status: 404
}
    
export type usersUpdateResponseComposite = usersUpdateResponse200 | usersUpdateResponse400 | usersUpdateResponse404;
    
export type usersUpdateResponse = usersUpdateResponseComposite & {
  headers: Headers;
}

export const getUsersUpdateUrl = (id: string,) => {


  

  return `/api/admin/users/${id}`
}

export const usersUpdate = async (id: string,
    updateUserDto: UpdateUserDto, options?: RequestInit): Promise<usersUpdateResponse> => {
  
  return customFetcher<usersUpdateResponse>(getUsersUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserDto,)
  }
);}


export type usersSetClaimsResponse200 = {
  data: null
  status: 200
}

export type usersSetClaimsResponse400 = {
  data: ProblemDetails
  status: 400
}

export type usersSetClaimsResponse404 = {
  data: ProblemDetails
  status: 404
}
    
export type usersSetClaimsResponseComposite = usersSetClaimsResponse200 | usersSetClaimsResponse400 | usersSetClaimsResponse404;
    
export type usersSetClaimsResponse = usersSetClaimsResponseComposite & {
  headers: Headers;
}

export const getUsersSetClaimsUrl = (id: string,) => {


  

  return `/api/admin/users/${id}/claims`
}

export const usersSetClaims = async (id: string,
    claimDto: ClaimDto[], options?: RequestInit): Promise<usersSetClaimsResponse> => {
  
  return customFetcher<usersSetClaimsResponse>(getUsersSetClaimsUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      claimDto,)
  }
);}


