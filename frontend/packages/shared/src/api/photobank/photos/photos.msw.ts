/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  PhotoDto,
  PhotoItemDto,
  PhotoItemDtoPageResponse
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';


export const getPhotosSearchPhotosResponseMock = (overrideResponse: Partial< PhotoItemDtoPageResponse > = {}): PhotoItemDtoPageResponse => ({totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), thumbnailUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), name: faker.string.alpha({length: {min: 1, max: 20}}), takenDate: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), isBW: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isAdultContent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), adultScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), isRacyContent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), racyScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), storageName: faker.string.alpha({length: {min: 1, max: 20}}), relativePath: faker.string.alpha({length: {min: 1, max: 20}}), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({tagId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined})})), undefined]), persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({personId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined})})), undefined]), captions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])})), undefined]), ...overrideResponse})

export const getPhotosGetPhotoResponseMock = (overrideResponse: Partial< PhotoDto > = {}): PhotoDto => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), name: faker.string.alpha({length: {min: 1, max: 20}}), scale: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), takenDate: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), previewUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), location: faker.helpers.arrayElement([{latitude: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), longitude: faker.number.float({min: undefined, max: undefined, fractionDigits: 2})}, undefined]), orientation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), undefined]), faces: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), personId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), undefined]), age: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), undefined]), gender: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), faceAttributes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), faceBox: {top: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), left: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), width: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), height: faker.number.int({min: undefined, max: undefined, multipleOf: undefined})}, friendlyFaceAttributes: faker.string.alpha({length: {min: 1, max: 20}})})), undefined]), captions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), adultScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), racyScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), ...overrideResponse})

export const getPhotosGetDuplicatesResponseMock = (): PhotoItemDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), thumbnailUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), name: faker.string.alpha({length: {min: 1, max: 20}}), takenDate: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), isBW: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isAdultContent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), adultScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), isRacyContent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), racyScore: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), storageName: faker.string.alpha({length: {min: 1, max: 20}}), relativePath: faker.string.alpha({length: {min: 1, max: 20}}), tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({tagId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined})})), undefined]), persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({personId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined})})), undefined]), captions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])})))


export const getPhotosSearchPhotosMockHandler = (overrideResponse?: PhotoItemDtoPageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PhotoItemDtoPageResponse> | PhotoItemDtoPageResponse)) => {
  return http.post('/api/photos/search', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPhotosSearchPhotosResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPhotosGetPhotoMockHandler = (overrideResponse?: PhotoDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PhotoDto> | PhotoDto)) => {
  return http.get('/api/photos/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPhotosGetPhotoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPhotosGetPreviewMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<null> | null)) => {
  return http.get('/api/photos/:id/preview', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPhotosUploadMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('/api/photos/upload', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPhotosGetDuplicatesMockHandler = (overrideResponse?: PhotoItemDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PhotoItemDto[]> | PhotoItemDto[])) => {
  return http.get('/api/photos/duplicates', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPhotosGetDuplicatesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPhotosMock = () => [
  getPhotosSearchPhotosMockHandler(),
  getPhotosGetPhotoMockHandler(),
  getPhotosGetPreviewMockHandler(),
  getPhotosUploadMockHandler(),
  getPhotosGetDuplicatesMockHandler()
]
