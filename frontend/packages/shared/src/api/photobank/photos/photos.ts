/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import type {
  FilterDto,
  PageResponseOfPhotoItemDto,
  PhotoDto,
  PhotoItemDto,
  PhotosGetDuplicatesParams,
  PhotosUploadBody,
  ProblemDetails
} from '.././model';

import { customFetcher } from '.././fetcher';

export type postApiPhotosSearchResponse200 = {
  data: PageResponseOfPhotoItemDto
  status: 200
}

export type postApiPhotosSearchResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type postApiPhotosSearchResponseComposite = postApiPhotosSearchResponse200 | postApiPhotosSearchResponse400;
    
export type postApiPhotosSearchResponse = postApiPhotosSearchResponseComposite & {
  headers: Headers;
}

export const getPostApiPhotosSearchUrl = () => {


  

  return `/api/photos/search`
}

export const postApiPhotosSearch = async (filterDto: FilterDto, options?: RequestInit): Promise<postApiPhotosSearchResponse> => {
  
  return customFetcher<postApiPhotosSearchResponse>(getPostApiPhotosSearchUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      filterDto,)
  }
);}


export type getApiPhotosResponse200 = {
  data: PhotoDto
  status: 200
}

export type getApiPhotosResponse404 = {
  data: ProblemDetails
  status: 404
}
    
export type getApiPhotosResponseComposite = getApiPhotosResponse200 | getApiPhotosResponse404;
    
export type getApiPhotosResponse = getApiPhotosResponseComposite & {
  headers: Headers;
}

export const getGetApiPhotosUrl = (id: number,) => {


  

  return `/api/photos/${id}`
}

export const getApiPhotos = async (id: number, options?: RequestInit): Promise<getApiPhotosResponse> => {
  
  return customFetcher<getApiPhotosResponse>(getGetApiPhotosUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type photosUploadResponse200 = {
  data: null
  status: 200
}
    
export type photosUploadResponseComposite = photosUploadResponse200;
    
export type photosUploadResponse = photosUploadResponseComposite & {
  headers: Headers;
}

export const getPhotosUploadUrl = () => {


  

  return `/api/photos/upload`
}

export const photosUpload = async (photosUploadBody: PhotosUploadBody, options?: RequestInit): Promise<photosUploadResponse> => {
    const formData = new FormData();
if(photosUploadBody.files !== undefined) {
 photosUploadBody.files.forEach(value => formData.append(`files`, value));
 }
if(photosUploadBody.storageId !== undefined) {
 formData.append(`storageId`, photosUploadBody.storageId.toString())
 }
if(photosUploadBody.path !== undefined) {
 formData.append(`path`, photosUploadBody.path)
 }

  return customFetcher<photosUploadResponse>(getPhotosUploadUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


export type photosGetDuplicatesResponse200 = {
  data: PhotoItemDto[]
  status: 200
}
    
export type photosGetDuplicatesResponseComposite = photosGetDuplicatesResponse200;
    
export type photosGetDuplicatesResponse = photosGetDuplicatesResponseComposite & {
  headers: Headers;
}

export const getPhotosGetDuplicatesUrl = (params?: PhotosGetDuplicatesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/photos/duplicates?${stringifiedParams}` : `/api/photos/duplicates`
}

export const photosGetDuplicates = async (params?: PhotosGetDuplicatesParams, options?: RequestInit): Promise<photosGetDuplicatesResponse> => {
  
  return customFetcher<photosGetDuplicatesResponse>(getPhotosGetDuplicatesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


