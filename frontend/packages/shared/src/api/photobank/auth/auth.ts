/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClaimDto,
  LoginRequestDto,
  LoginResponseDto,
  ProblemDetails,
  RegisterRequestDto,
  RoleDto,
  TelegramExchangeRequest,
  TelegramExchangeResponse,
  UpdateUserDto,
  UserDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { customFetcher } from '.././fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export type authLoginResponse200 = {
  data: LoginResponseDto
  status: 200
}

export type authLoginResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authLoginResponseComposite = authLoginResponse200 | authLoginResponse400;
    
export type authLoginResponse = authLoginResponseComposite & {
  headers: Headers;
}

export const getAuthLoginUrl = () => {


  

  return `/auth/login`
}

export const authLogin = async (loginRequestDto: LoginRequestDto, options?: RequestInit): Promise<authLoginResponse> => {
  
  return customFetcher<authLoginResponse>(getAuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequestDto,)
  }
);}




export const getAuthLoginMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: LoginRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: LoginRequestDto}, TContext> => {

const mutationKey = ['authLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogin>>, {data: LoginRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  authLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>
    export type AuthLoginMutationBody = LoginRequestDto
    export type AuthLoginMutationError = ProblemDetails

    export const useAuthLogin = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: LoginRequestDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof authLogin>>,
        TError,
        {data: LoginRequestDto},
        TContext
      > => {

      const mutationOptions = getAuthLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export type authRegisterResponse200 = {
  data: null
  status: 200
}

export type authRegisterResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authRegisterResponseComposite = authRegisterResponse200 | authRegisterResponse400;
    
export type authRegisterResponse = authRegisterResponseComposite & {
  headers: Headers;
}

export const getAuthRegisterUrl = () => {


  

  return `/auth/register`
}

export const authRegister = async (registerRequestDto: RegisterRequestDto, options?: RequestInit): Promise<authRegisterResponse> => {
  
  return customFetcher<authRegisterResponse>(getAuthRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      registerRequestDto,)
  }
);}




export const getAuthRegisterMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRegister>>, TError,{data: RegisterRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authRegister>>, TError,{data: RegisterRequestDto}, TContext> => {

const mutationKey = ['authRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authRegister>>, {data: RegisterRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  authRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authRegister>>>
    export type AuthRegisterMutationBody = RegisterRequestDto
    export type AuthRegisterMutationError = ProblemDetails

    export const useAuthRegister = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRegister>>, TError,{data: RegisterRequestDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof authRegister>>,
        TError,
        {data: RegisterRequestDto},
        TContext
      > => {

      const mutationOptions = getAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export type authGetUserResponse200 = {
  data: UserDto
  status: 200
}
    
export type authGetUserResponseComposite = authGetUserResponse200;
    
export type authGetUserResponse = authGetUserResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserUrl = () => {


  

  return `/auth/user`
}

export const authGetUser = async ( options?: RequestInit): Promise<authGetUserResponse> => {
  
  return customFetcher<authGetUserResponse>(getAuthGetUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getAuthGetUserQueryKey = () => {
    return [`/auth/user`] as const;
    }

    
export const getAuthGetUserQueryOptions = <TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGetUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetUser>>> = ({ signal }) => authGetUser(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthGetUserQueryResult = NonNullable<Awaited<ReturnType<typeof authGetUser>>>
export type AuthGetUserQueryError = unknown



export function useAuthGetUser<TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthGetUserQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type authUpdateUserResponse200 = {
  data: null
  status: 200
}

export type authUpdateUserResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authUpdateUserResponseComposite = authUpdateUserResponse200 | authUpdateUserResponse400;
    
export type authUpdateUserResponse = authUpdateUserResponseComposite & {
  headers: Headers;
}

export const getAuthUpdateUserUrl = () => {


  

  return `/auth/user`
}

export const authUpdateUser = async (updateUserDto: UpdateUserDto, options?: RequestInit): Promise<authUpdateUserResponse> => {
  
  return customFetcher<authUpdateUserResponse>(getAuthUpdateUserUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserDto,)
  }
);}




export const getAuthUpdateUserMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authUpdateUser>>, TError,{data: UpdateUserDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authUpdateUser>>, TError,{data: UpdateUserDto}, TContext> => {

const mutationKey = ['authUpdateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authUpdateUser>>, {data: UpdateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  authUpdateUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof authUpdateUser>>>
    export type AuthUpdateUserMutationBody = UpdateUserDto
    export type AuthUpdateUserMutationError = ProblemDetails

    export const useAuthUpdateUser = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authUpdateUser>>, TError,{data: UpdateUserDto}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof authUpdateUser>>,
        TError,
        {data: UpdateUserDto},
        TContext
      > => {

      const mutationOptions = getAuthUpdateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export type authGetUserClaimsResponse200 = {
  data: ClaimDto[]
  status: 200
}
    
export type authGetUserClaimsResponseComposite = authGetUserClaimsResponse200;
    
export type authGetUserClaimsResponse = authGetUserClaimsResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserClaimsUrl = () => {


  

  return `/auth/claims`
}

export const authGetUserClaims = async ( options?: RequestInit): Promise<authGetUserClaimsResponse> => {
  
  return customFetcher<authGetUserClaimsResponse>(getAuthGetUserClaimsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getAuthGetUserClaimsQueryKey = () => {
    return [`/auth/claims`] as const;
    }

    
export const getAuthGetUserClaimsQueryOptions = <TData = Awaited<ReturnType<typeof authGetUserClaims>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUserClaims>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGetUserClaimsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetUserClaims>>> = ({ signal }) => authGetUserClaims(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGetUserClaims>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthGetUserClaimsQueryResult = NonNullable<Awaited<ReturnType<typeof authGetUserClaims>>>
export type AuthGetUserClaimsQueryError = unknown



export function useAuthGetUserClaims<TData = Awaited<ReturnType<typeof authGetUserClaims>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUserClaims>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthGetUserClaimsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type authGetUserRolesResponse200 = {
  data: RoleDto[]
  status: 200
}
    
export type authGetUserRolesResponseComposite = authGetUserRolesResponse200;
    
export type authGetUserRolesResponse = authGetUserRolesResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserRolesUrl = () => {


  

  return `/auth/roles`
}

export const authGetUserRoles = async ( options?: RequestInit): Promise<authGetUserRolesResponse> => {
  
  return customFetcher<authGetUserRolesResponse>(getAuthGetUserRolesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getAuthGetUserRolesQueryKey = () => {
    return [`/auth/roles`] as const;
    }

    
export const getAuthGetUserRolesQueryOptions = <TData = Awaited<ReturnType<typeof authGetUserRoles>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUserRoles>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGetUserRolesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetUserRoles>>> = ({ signal }) => authGetUserRoles(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGetUserRoles>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthGetUserRolesQueryResult = NonNullable<Awaited<ReturnType<typeof authGetUserRoles>>>
export type AuthGetUserRolesQueryError = unknown



export function useAuthGetUserRoles<TData = Awaited<ReturnType<typeof authGetUserRoles>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authGetUserRoles>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthGetUserRolesQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type authTelegramExchangeResponse200 = {
  data: TelegramExchangeResponse
  status: 200
}

export type authTelegramExchangeResponse401 = {
  data: ProblemDetails
  status: 401
}

export type authTelegramExchangeResponse403 = {
  data: ProblemDetails
  status: 403
}
    
export type authTelegramExchangeResponseComposite = authTelegramExchangeResponse200 | authTelegramExchangeResponse401 | authTelegramExchangeResponse403;
    
export type authTelegramExchangeResponse = authTelegramExchangeResponseComposite & {
  headers: Headers;
}

export const getAuthTelegramExchangeUrl = () => {


  

  return `/auth/telegram/exchange`
}

export const authTelegramExchange = async (telegramExchangeRequest: TelegramExchangeRequest, options?: RequestInit): Promise<authTelegramExchangeResponse> => {
  
  return customFetcher<authTelegramExchangeResponse>(getAuthTelegramExchangeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      telegramExchangeRequest,)
  }
);}




export const getAuthTelegramExchangeMutationOptions = <TError = ProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTelegramExchange>>, TError,{data: TelegramExchangeRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authTelegramExchange>>, TError,{data: TelegramExchangeRequest}, TContext> => {

const mutationKey = ['authTelegramExchange'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authTelegramExchange>>, {data: TelegramExchangeRequest}> = (props) => {
          const {data} = props ?? {};

          return  authTelegramExchange(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthTelegramExchangeMutationResult = NonNullable<Awaited<ReturnType<typeof authTelegramExchange>>>
    export type AuthTelegramExchangeMutationBody = TelegramExchangeRequest
    export type AuthTelegramExchangeMutationError = ProblemDetails | ProblemDetails

    export const useAuthTelegramExchange = <TError = ProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authTelegramExchange>>, TError,{data: TelegramExchangeRequest}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof authTelegramExchange>>,
        TError,
        {data: TelegramExchangeRequest},
        TContext
      > => {

      const mutationOptions = getAuthTelegramExchangeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    