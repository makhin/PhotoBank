/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import type {
  ClaimDto,
  LoginRequestDto,
  LoginResponseDto,
  ProblemDetails,
  RegisterRequestDto,
  RoleDto,
  UpdateUserDto,
  UserDto
} from '.././model';

import { customFetcher } from '.././fetcher';

export type authLoginResponse200 = {
  data: LoginResponseDto
  status: 200
}

export type authLoginResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authLoginResponseComposite = authLoginResponse200 | authLoginResponse400;
    
export type authLoginResponse = authLoginResponseComposite & {
  headers: Headers;
}

export const getAuthLoginUrl = () => {


  

  return `/api/auth/login`
}

export const authLogin = async (loginRequestDto: LoginRequestDto, options?: RequestInit): Promise<authLoginResponse> => {
  
  return customFetcher<authLoginResponse>(getAuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequestDto,)
  }
);}


export type authRegisterResponse200 = {
  data: null
  status: 200
}

export type authRegisterResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authRegisterResponseComposite = authRegisterResponse200 | authRegisterResponse400;
    
export type authRegisterResponse = authRegisterResponseComposite & {
  headers: Headers;
}

export const getAuthRegisterUrl = () => {


  

  return `/api/auth/register`
}

export const authRegister = async (registerRequestDto: RegisterRequestDto, options?: RequestInit): Promise<authRegisterResponse> => {
  
  return customFetcher<authRegisterResponse>(getAuthRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      registerRequestDto,)
  }
);}


export type authGetUserResponse200 = {
  data: UserDto
  status: 200
}
    
export type authGetUserResponseComposite = authGetUserResponse200;
    
export type authGetUserResponse = authGetUserResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserUrl = () => {


  

  return `/api/auth/user`
}

export const authGetUser = async ( options?: RequestInit): Promise<authGetUserResponse> => {
  
  return customFetcher<authGetUserResponse>(getAuthGetUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type authUpdateUserResponse200 = {
  data: null
  status: 200
}

export type authUpdateUserResponse400 = {
  data: ProblemDetails
  status: 400
}
    
export type authUpdateUserResponseComposite = authUpdateUserResponse200 | authUpdateUserResponse400;
    
export type authUpdateUserResponse = authUpdateUserResponseComposite & {
  headers: Headers;
}

export const getAuthUpdateUserUrl = () => {


  

  return `/api/auth/user`
}

export const authUpdateUser = async (updateUserDto: UpdateUserDto, options?: RequestInit): Promise<authUpdateUserResponse> => {
  
  return customFetcher<authUpdateUserResponse>(getAuthUpdateUserUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserDto,)
  }
);}


export type authGetUserClaimsResponse200 = {
  data: ClaimDto[]
  status: 200
}
    
export type authGetUserClaimsResponseComposite = authGetUserClaimsResponse200;
    
export type authGetUserClaimsResponse = authGetUserClaimsResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserClaimsUrl = () => {


  

  return `/api/auth/claims`
}

export const authGetUserClaims = async ( options?: RequestInit): Promise<authGetUserClaimsResponse> => {
  
  return customFetcher<authGetUserClaimsResponse>(getAuthGetUserClaimsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type authGetUserRolesResponse200 = {
  data: RoleDto[]
  status: 200
}
    
export type authGetUserRolesResponseComposite = authGetUserRolesResponse200;
    
export type authGetUserRolesResponse = authGetUserRolesResponseComposite & {
  headers: Headers;
}

export const getAuthGetUserRolesUrl = () => {


  

  return `/api/auth/roles`
}

export const authGetUserRoles = async ( options?: RequestInit): Promise<authGetUserRolesResponse> => {
  
  return customFetcher<authGetUserRolesResponse>(getAuthGetUserRolesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


