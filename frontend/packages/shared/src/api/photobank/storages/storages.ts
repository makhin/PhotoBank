/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  StorageDto
} from '../photoBankApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

import { customFetcher } from '.././fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export type storagesGetAllResponse200 = {
  data: StorageDto[]
  status: 200
}
    
export type storagesGetAllResponseComposite = storagesGetAllResponse200;
    
export type storagesGetAllResponse = storagesGetAllResponseComposite & {
  headers: Headers;
}

export const getStoragesGetAllUrl = () => {


  

  return `/storages`
}

export const storagesGetAll = async ( options?: RequestInit): Promise<storagesGetAllResponse> => {
  
  return customFetcher<storagesGetAllResponse>(getStoragesGetAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getStoragesGetAllQueryKey = () => {
    return [`/storages`] as const;
    }

    
export const getStoragesGetAllQueryOptions = <TData = Awaited<ReturnType<typeof storagesGetAll>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storagesGetAll>>, TError, TData>, request?: SecondParameter<typeof customFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStoragesGetAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof storagesGetAll>>> = () => storagesGetAll(requestOptions);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof storagesGetAll>>, TError, TData> & { queryKey: QueryKey }
}

export type StoragesGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof storagesGetAll>>>
export type StoragesGetAllQueryError = unknown



export function useStoragesGetAll<TData = Awaited<ReturnType<typeof storagesGetAll>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storagesGetAll>>, TError, TData>, request?: SecondParameter<typeof customFetcher>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getStoragesGetAllQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



