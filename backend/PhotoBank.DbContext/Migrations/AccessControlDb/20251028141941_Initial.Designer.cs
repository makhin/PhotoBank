// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoBank.AccessControl;

#nullable disable

namespace PhotoBank.DbContext.Migrations.AccessControlDb
{
    [DbContext(typeof(AccessControlDbContext))]
    [Migration("20251028141941_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("Flags_CanSeeNsfw")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccessProfiles");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfileDateRangeAllow", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("ProfileId", "FromDate", "ToDate");

                    b.ToTable("AccessProfileDateRanges");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfilePersonGroupAllow", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonGroupId")
                        .HasColumnType("integer");

                    b.HasKey("ProfileId", "PersonGroupId");

                    b.ToTable("AccessProfilePersonGroups");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfileStorageAllow", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.HasKey("ProfileId", "StorageId");

                    b.ToTable("AccessProfileStorages");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.RoleAccessProfile", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "ProfileId");

                    b.ToTable("RoleAccessProfiles");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.UserAccessProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("UserAccessProfiles");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfileDateRangeAllow", b =>
                {
                    b.HasOne("PhotoBank.AccessControl.AccessProfile", "Profile")
                        .WithMany("DateRanges")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfilePersonGroupAllow", b =>
                {
                    b.HasOne("PhotoBank.AccessControl.AccessProfile", "Profile")
                        .WithMany("PersonGroups")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfileStorageAllow", b =>
                {
                    b.HasOne("PhotoBank.AccessControl.AccessProfile", "Profile")
                        .WithMany("Storages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.UserAccessProfile", b =>
                {
                    b.HasOne("PhotoBank.AccessControl.AccessProfile", "Profile")
                        .WithMany("UserAssignments")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PhotoBank.AccessControl.AccessProfile", b =>
                {
                    b.Navigation("DateRanges");

                    b.Navigation("PersonGroups");

                    b.Navigation("Storages");

                    b.Navigation("UserAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
