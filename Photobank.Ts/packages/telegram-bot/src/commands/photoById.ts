import {Context, InputFile} from "grammy";
import { getPhotoById } from "@photobank/shared/api";
import {getPersonName, getStorageName} from "@photobank/shared/dictionaries";
import {formatDate} from "@photobank/shared/index";

export async function photoByIdCommand(ctx: Context) {
    const parts = ctx.message?.text?.split(" ");
    const id = Number(parts?.[1]);

    if (!id || isNaN(id)) {
        await ctx.reply("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /photo <id>");
        return;
    }

    try {
        const photo = await getPhotoById(id);

        if (!photo || !photo.previewImage) {
            await ctx.reply("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–µ–≤—å—é.");
            return;
        }

        const buffer = Buffer.from(photo.previewImage, "base64");
        const file = new InputFile(buffer);

        const tags = photo.tags?.length ? `üè∑Ô∏è ${photo.tags.join(", ")}` : "";
        const people = photo.faces
            ?.map(f => f.personId ?? 0)
            .filter(Boolean)
            .map(getPersonName)
            .join(", ");
        const takenDate = formatDate(photo.takenDate);

        const persons = people ? `üë§ ${people}` : "";
        const captionLines = [
            `üì∏ ${photo.name}`,
            `üìÖ ${takenDate}`,
            `üìù ${(photo.captions ? photo.captions[0] : "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")}`,
            persons,
            tags,
        ].filter(Boolean);

        await ctx.replyWithPhoto(file, {
            caption: captionLines.join("\n")
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", error);
        await ctx.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ.");
    }
}
